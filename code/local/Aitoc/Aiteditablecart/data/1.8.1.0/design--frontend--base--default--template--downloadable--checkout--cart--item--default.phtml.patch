diff U3B D:/__AITOC__/projects/2013/AZL-186-34218__sce_bugfix/patch/orig/default.phtml D:/__AITOC__/projects/2013/AZL-186-34218__sce_bugfix/patch/modif/default.phtml
--- D:/__AITOC__/projects/2013/AZL-186-34218__sce_bugfix/patch/orig/default.phtml	Thu Dec 12 09:58:10 2013
+++ D:/__AITOC__/projects/2013/AZL-186-34218__sce_bugfix/patch/modif/default.phtml	Wed Dec 25 11:20:02 2013
@@ -37,6 +37,11 @@
     <h2 class="product-name"><a
             href="<?php echo $this->getProductUrl() ?>"><?php echo $this->escapeHtml($this->getProductName()) ?></a>
     </h2>
+
+
+
+<?php /* START AITOC COMMENTING        
+
     <?php if ($_options = $this->getOptionList()): ?>
         <dl class="item-options">
             <?php foreach ($_options as $_option) : ?>
@@ -55,6 +60,535 @@
             <?php endforeach; ?>
         </dl>
     <?php endif; ?>
+
+
+        
+FINISH AITOC COMMENTING */ ?>        
+        
+
+<fieldset class="product-options" id="product-options-wrapper" style="border:0px; margin:0px; padding:0px; background-color:inherit; ">
+
+    <script type="text/javascript">
+    //<![CDATA[
+
+    var optionTextCounter = {
+        count : function(field,cntfield,maxlimit){
+            if (field.value.length > maxlimit){
+                field.value = field.value.substring(0, maxlimit);
+            } else {
+                cntfield.innerHTML = maxlimit - field.value.length;
+            }
+        }
+    }
+
+    Product.Options<?php echo $_item->getId() ?> = Class.create();
+    Product.Options<?php echo $_item->getId() ?>.prototype = {
+        initialize : function(config){
+            this.config = config;
+        },
+        reloadPrice : function(){
+return '';
+        }
+    }
+    function validateOptionsCallback(elmId, result){
+        var container = $(elmId).up('ul.options-list');
+        if (result == 'failed') {
+            container.removeClassName('validation-passed');
+            container.addClassName('validation-failed');
+        } else {
+            container.removeClassName('validation-failed');
+            container.addClassName('validation-passed');
+        }
+    }
+    var opConfig<?php echo $_item->getId() ?> = new Product.Options<?php echo $_item->getId() ?>(<?php echo $this->getJsonConfig() ?>);
+    //]]>
+    
+    
+    
+/**************************** CONFIGURABLE PRODUCT **************************/
+Product.Config<?php echo $_item->getId() ?> = Class.create();
+Product.Config<?php echo $_item->getId() ?>.prototype = {
+    initialize: function(config){
+        this.config     = config;
+        this.taxConfig  = this.config.taxConfig;
+        this.settings   = $$('.super-attribute-select-<?php echo $_item->getId() ?>');
+        this.state      = new Hash();
+        this.priceTemplate = new Template(this.config.template);
+        this.prices     = config.prices;
+
+        this.settings.each(function(element){
+            Event.observe(element, 'change', this.configure.bind(this))
+        }.bind(this));
+this.aEmelentsToConfig = [];   
+this.iCounter = 0;   
+        // fill state
+        this.settings.each(function(element){
+            var attributeId = element.id.replace(/[a-z]*/, '');
+            if(attributeId && this.config.attributes[attributeId]) {
+                element.config = this.config.attributes[attributeId];
+                element.attributeId = attributeId;
+                this.state[attributeId] = false;
+            }
+        }.bind(this))
+
+        // Init settings dropdown
+        var childSettings = [];
+        for(var i=this.settings.length-1;i>=0;i--){
+            var prevSetting = this.settings[i-1] ? this.settings[i-1] : false;
+            var nextSetting = this.settings[i+1] ? this.settings[i+1] : false;
+            if(i==0){
+                this.fillSelect(this.settings[i])
+            }
+            else {
+                this.settings[i].disabled=true;
+            }
+            $(this.settings[i]).childSettings = childSettings.clone();
+            $(this.settings[i]).prevSetting   = prevSetting;
+            $(this.settings[i]).nextSetting   = nextSetting;
+            childSettings.push(this.settings[i]);
+        }
+
+        // try retireve options from url
+        var separatorIndex = window.location.href.indexOf('#');
+        if (separatorIndex!=-1) {
+            var paramsStr = window.location.href.substr(separatorIndex+1);
+            this.values = paramsStr.toQueryParams();
+            this.settings.each(function(element){
+                var attributeId = element.attributeId;
+                element.value = this.values[attributeId];
+                this.configureElement(element);
+            }.bind(this));
+        }
+        
+if (this.aEmelentsToConfig)
+{
+    for(var p=0; p<this.iCounter; p++)
+    {
+        this.configureElement(this.aEmelentsToConfig[p]);
+    }    
+}
+        
+
+    },
+
+    configure: function(event){
+        var element = Event.element(event);
+        this.configureElement(element);
+    },
+
+    configureElement : function(element) {
+        this.reloadOptionLabels(element);
+        if(element.value){
+            this.state[element.config.id] = element.value;
+            if(element.nextSetting){
+                element.nextSetting.disabled = false;
+                this.fillSelect(element.nextSetting);
+                this.resetChildren(element.nextSetting);
+            }
+        }
+        else {
+            this.resetChildren(element);
+        }
+        this.reloadPrice();
+//      Calculator.updatePrice();
+    },
+
+    reloadOptionLabels: function(element){
+        var selectedPrice;
+        if(element.options[element.selectedIndex].config){
+            selectedPrice = parseFloat(element.options[element.selectedIndex].config.price)
+        }
+        else{
+            selectedPrice = 0;
+        }
+        for(var i=0;i<element.options.length;i++){
+            if(element.options[i].config){
+                element.options[i].text = this.getOptionLabel(element.options[i].config, element.options[i].config.price-selectedPrice);
+            }
+        }
+    },
+
+    resetChildren : function(element){
+        if(element.childSettings) {
+            for(var i=0;i<element.childSettings.length;i++){
+                element.childSettings[i].selectedIndex = 0;
+                element.childSettings[i].disabled = true;
+                if(element.config){
+                    this.state[element.config.id] = false;
+                }
+            }
+        }
+    },
+
+ 
+    
+    fillSelect: function(element){
+        var attributeId = element.id.replace(/[a-z]*/, '');
+        var options = this.getAttributeOptions(attributeId);
+        this.clearSelect(element);
+        element.options[0] = new Option(this.config.chooseText, '');
+
+        var prevConfig = false;
+        if(element.prevSetting){
+            prevConfig = element.prevSetting.options[element.prevSetting.selectedIndex];
+        }
+        
+var bHasSelected  =   false;      
+        if(options) {
+            var index = 1;
+bHasSelected = false;
+            for(var i=0;i<options.length;i++){
+                var allowedProducts = [];
+                if(prevConfig) {
+                    for(var j=0;j<options[i].products.length;j++){
+                        if(prevConfig.config.allowedProducts
+                            && prevConfig.config.allowedProducts.indexOf(options[i].products[j])>-1){
+                            allowedProducts.push(options[i].products[j]);
+                        }
+                    }
+                } else {
+                    allowedProducts = options[i].products.clone();
+                }
+
+                if(allowedProducts.size()>0){
+                    options[i].allowedProducts = allowedProducts;
+//                    element.options[index] = new Option(this.getOptionLabel(options[i], options[i].price), options[i].id);
+                    element.options[index] = new Option(this.getOptionLabel(options[i], options[i].price), options[i].id, options[i].attr_value); // aitoc code
+                    
+if (options[i].attr_value) bHasSelected = true;                    
+                    
+                    element.options[index].config = options[i];
+                    index++;
+                }
+            }
+        }
+        
+if (bHasSelected)
+{
+    this.aEmelentsToConfig[this.iCounter] = element;
+    this.iCounter++;
+}
+        
+    },
+
+    
+    
+    getOptionLabel: function(option, price){
+        var price = parseFloat(price);
+        if (this.taxConfig.includeTax) {
+            var tax = price / (100 + this.taxConfig.defaultTax) * this.taxConfig.defaultTax;
+            var excl = price - tax;
+            var incl = excl*(1+(this.taxConfig.currentTax/100));
+        } else {
+            var tax = price * (this.taxConfig.currentTax / 100);
+            var excl = price;
+            var incl = excl + tax;
+        }
+
+        if (this.taxConfig.showIncludeTax || this.taxConfig.showBothPrices) {
+            price = incl;
+        } else {
+            price = excl;
+        }
+
+        var str = option.label;
+        if(price){
+            if (this.taxConfig.showBothPrices) {
+                str+= ' ' + this.formatPrice(excl, true) + ' (' + this.formatPrice(price, true) + ' ' + this.taxConfig.inclTaxTitle + ')';
+            } else {
+                str+= ' ' + this.formatPrice(price, true);
+            }
+        }
+        return str;
+    },
+
+    formatPrice: function(price, showSign){
+        var str = '';
+        price = parseFloat(price);
+        if(showSign){
+            if(price<0){
+                str+= '-';
+                price = -price;
+            }
+            else{
+                str+= '+';
+            }
+        }
+
+        var roundedPrice = (Math.round(price*100)/100).toString();
+
+        if (this.prices && this.prices[roundedPrice]) {
+            str+= this.prices[roundedPrice];
+        }
+        else {
+            str+= this.priceTemplate.evaluate({price:price.toFixed(2)});
+        }
+        return str;
+    },
+
+    clearSelect: function(element){
+        for(var i=element.options.length-1;i>=0;i--){
+            element.remove(i);
+        }
+    },
+
+    getAttributeOptions: function(attributeId){
+        if(this.config.attributes[attributeId]){
+            return this.config.attributes[attributeId].options;
+        }
+    },
+
+    reloadPrice: function(){
+return '';     
+    },
+
+    reloadOldPrice: function(){
+return '';
+    }
+}    
+    
+    </script>
+    
+
+
+<?php 
+
+    $_product    = $this->getProduct();
+    
+    switch ($_product->getTypeId()) 
+    {
+        case 'configurable':
+?>
+
+<?php
+$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
+?>
+<?php if ($_product->isSaleable() && count($_attributes)):?>
+    <dl>
+    <?php foreach($_attributes as $_attribute): ?>
+        <dt><label><?php echo $_attribute->getLabel() ?><span class="required">&nbsp;*</span></label></dt>
+        <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
+          <select name="cart[<?php echo $_item->getId() ?>][super_attribute][<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select-<?php echo $_item->getId() ?>">
+          
+            <option><?php echo $this->__('Choose an Option...') ?></option>
+          </select>
+        </dd>
+    <?php endforeach; ?>
+    </dl>
+    <script type="text/javascript">
+        var spConfig<?php echo $_item->getId() ?> = new Product.Config<?php echo $_item->getId() ?>(<?php echo $this->getJsonConfig() ?>);
+    </script>
+<?php endif;?>        
+        
+
+<?php $_options = Mage::helper('core')->decorateArray($this->getOptions()) ?>
+<?php if (count($_options)):?>
+
+    <dl>
+    <?php foreach($_options as $_option): ?>
+        <?php echo $this->getOptionHtml($_option) ?>
+    <?php endforeach; ?>
+    </dl>
+<?php endif; ?>
+
+
+        <?php 
+
+        break;
+        
+        case 'bundle':
+?>
+
+<script type="text/javascript">
+
+if(typeof Product=='undefined') {
+    var Product = {};
+}
+/**************************** BUNDLE PRODUCT **************************/
+Product.Bundle<?php echo $_item->getId() ?> = Class.create();
+Product.Bundle<?php echo $_item->getId() ?>.prototype = {
+    initialize: function(config){
+        this.config = config; this.cartId = '<?php echo $_item->getId(); ?>';
+        this.reloadPrice();
+    },
+    changeSelection: function(selection){
+        parts = selection.id.split('-');
+        if (this.config['options'][parts[2]].isMulti) {
+            selected = new Array();
+            if (selection.tagName == 'SELECT') {
+                for (var i = 0; i < selection.options.length; i++) {
+                    if (selection.options[i].selected && selection.options[i].value != '') {
+                        selected.push(selection.options[i].value);
+                    }
+                }
+            } else if (selection.tagName == 'INPUT') {
+                selector = parts[0]+'-'+parts[1]+'-'+parts[2];
+                selections = $$('.'+selector);
+                for (var i = 0; i < selections.length; i++) {
+                    if (selections[i].checked && selections[i].value != '') {
+                        selected.push(selections[i].value);
+                    }
+                }
+            }
+            this.config.selected[parts[2]] = selected;
+        } else {
+            if (selection.value != '') {
+                this.config.selected[parts[2]] = new Array(selection.value);
+            } else {
+                this.config.selected[parts[2]] = new Array();
+            }
+            this.populateQty(parts[2], selection.value);
+        }
+        this.reloadPrice();
+
+    },
+
+    reloadPrice: function() {
+return '';        
+    },
+
+    populateQty: function(optionId, selectionId){
+        if (selectionId == '' || selectionId == 'none') {
+            this.showQtyInput(optionId, '0', false);
+            return;
+        }
+        if (this.config.options[optionId].selections[selectionId].customQty == 1) {
+            this.showQtyInput(optionId, this.config.options[optionId].selections[selectionId].qty, true);
+        } else {
+            this.showQtyInput(optionId, this.config.options[optionId].selections[selectionId].qty, false);
+        }
+    },
+
+    showQtyInput: function(optionId, value, canEdit) {
+        elem = $$('input[name="cart[' + this.cartId + '][bundle_option_qty][' + optionId  + ']"]').first();
+        elem.value = value;
+        elem.disabled = !canEdit;
+        if (canEdit) {
+            elem.removeClassName('qty-disabled');
+        } else {
+            elem.addClassName('qty-disabled');
+        }
+    },
+	changeOptionQty: function (element, event) {
+        var checkQty = true;
+        if (typeof(event) != 'undefined') {
+            if (event.keyCode == 8 || event.keyCode == 46) {
+                checkQty = false;
+            }
+        }
+        if (checkQty && (Number(element.value) == 0 || isNaN(Number(element.value)))) {
+            element.value = 1;
+        }
+        parts = element.id.split('-');
+        optionId = parts[2];		
+        if (!this.config['options'][optionId].isMulti) {			
+			selectionId = this.config.selected[optionId][0];
+            this.config.options[optionId].selections[selectionId].qty = element.value*1;
+            this.reloadPrice();
+        }
+    },
+    validationCallback: function (elmId, result){
+        if (typeof elmId == 'undefined') {
+            return;
+        }
+        var container = $(elmId).up('ul.options-list');
+        if (typeof container != 'undefined') {
+            if (result == 'failed') {
+                container.removeClassName('validation-passed');
+                container.addClassName('validation-failed');
+            } else {
+                container.removeClassName('validation-failed');
+                container.addClassName('validation-passed');
+            }
+        }
+    }
+}
+
+
+bundle<?php echo $_item->getId() ?> = new Product.Bundle<?php echo $_item->getId() ?>(<?php echo $this->getJsonConfig() ?>);
+
+document.observe('dom:loaded', function() {
+$$('input[type=radio][checked=checked], select').reject(function(el) {
+		return (('SELECT' == el.tagName) && el.multiple);  // Unfortunately CSS selector select[multiple!=multple] doesn`t work as expected
+	}).each(function(el) {
+
+		var cart = el.name.match(/cart\[(\d+)\]/);
+		var matches = ('INPUT' == el.tagName) ? el.id.match(/bundle-option-(\d+)-(\d+)/) : el.id.match(/bundle-option-(\d+)/);
+
+		if (cart && matches)
+		{
+			var qtyInput = $$('input[name="cart[' + cart[1] + '][bundle_option_qty][' + matches[1]  + ']"]').first();
+
+			if ('SELECT' == el.tagName)
+			{
+				matches[2] = el.value;
+			}
+
+			window['bundle' + cart[1]].config.options[matches[1]].selections[matches[2]].qty = qtyInput.value;
+		}
+
+	});
+});
+</script>
+<?php
+
+$_options = Mage::helper('core')->decorateArray($this->getBundleOptions());
+?>
+<?php if ($_product->isSaleable()):?>
+    <?php if (count($_options)): ?>
+        <dl>
+        <?php foreach ($_options as $_option): ?>
+            <?php if (!$_option->getSelections()): ?>
+                <?php continue; ?>
+            <?php endif; ?>
+            <?php echo $this->getBundleOptionHtml($_option) ?>
+        <?php endforeach; ?>
+        </dl>
+    <?php else: ?>
+        <p><?php echo $this->__('No options of this product are available.') ?></p>
+    <?php endif; ?>
+<?php endif;?>            
+
+
+<?php $_options = Mage::helper('core')->decorateArray($this->getDefaultOptions()) ?>
+<?php if (count($_options)):?>
+
+    <dl>
+    <?php foreach($_options as $_option): ?>
+        <?php echo $this->getDefaultOptionHtml($_option) ?>
+    <?php endforeach; ?>
+    </dl>
+<?php endif; ?>
+
+
+        <?php 
+        break;   
+         
+        default:
+?>
+<?php $_options = Mage::helper('core')->decorateArray($this->getOptions()) ?>
+<?php if (count($_options)):?>
+
+    <dl>
+    <?php foreach($_options as $_option): ?>
+        <?php echo $this->getOptionHtml($_option) ?>
+    <?php endforeach; ?>
+    </dl>
+<?php endif; ?>
+            
+        <?php 
+        break;    
+    }
+
+?>
+
+</fieldset>
+
+
+<!-- FINISH AITOC  -->  
+
+<?php /* START AITOC COMMENTING        
+    
     <!-- downloadable -->
     <?php if ($links = $this->getLinks()): ?>
         <dl class="item-options">
@@ -65,6 +599,103 @@
         </dl>
     <?php endif; ?>
     <!-- EOF downloadable -->
+
+
+FINISH AITOC COMMENTING */ ?>        
+        
+
+<?php if ($_item->getItemId()) $iCurrentItemId = $_item->getItemId(); else $iCurrentItemId = uniqid('cart_item'); ?>
+
+<?php $_linksPurchasedSeparately = $this->getLinksPurchasedSeparately() ?>
+<?php if ($this->getProduct()->isSaleable() && $this->hasLinks()):?>
+    <dl>
+        <?php $_links = $this->getLinks(); ?>
+        <?php $_isRequired = $this->getLinkSelectionRequired(); ?>
+        <dt><label><?php echo $this->getLinksTitle() ?><?php if ($_isRequired): ?><span class="required">&nbsp;*</span><?php endif; ?></label></dt>
+        <dd<?php /* if ($_option->decoratedIsLast){?> class="last"<?php } */ ?>>
+<?php /* START AITOC COMMENTING        
+            <ul id="downloadable-links-list" class="options-list">
+FINISH AITOC COMMENTING */ ?>        
+            <ul id="downloadable-links-list" class="options-list"  style="list-style-type:none">
+            <?php foreach ($_links as $_link): ?>
+                <li>
+                    <?php if ($_linksPurchasedSeparately): ?>
+<?php /* START AITOC COMMENTING        
+                        <input type="checkbox" class="checkbox<?php if($_isRequired):?> validate-one-required-by-name<?php endif; ?> product-downloadable-link" onclick="dConfig.reloadPrice()" name="links[]" id="links_<?php echo $_link->getId() ?>" value="<?php echo $_link->getId() ?>" />class="
+FINISH AITOC COMMENTING */ ?>        
+                        <input type="checkbox" class="checkbox<?php if($_isRequired):?> validate-one-required-by-name<?php endif; ?> product-downloadable-link" onclick="dConfig.reloadPrice()" name="cart[<?php echo $iCurrentItemId; ?>][downloadable_links][]" id="links_<?php echo $_link->getId() ?>" value="<?php echo $_link->getId() ?>" <?php if ($_link->getIsChecked()) echo 'checked="checked"';?>  />
+                    <?php endif; ?>
+                    <span class="label">
+                        <label for="links_<?php echo $_link->getId() ?>">
+                            <?php echo $_link->getTitle() ?>
+                        </label>
+                            <?php if ($_link->getSampleFile() || $_link->getSampleUrl()): ?>
+                                &nbsp;(<a href="<?php echo $this->getLinkSamlpeUrl($_link) ?>" <?php echo $this->getIsOpenInNewWindow()?'onclick="this.target=\'_blank\'"':''; ?>><?php echo Mage::helper('downloadable')->__('sample') ?></a>)
+                            <?php endif; ?>
+                            <?php if ($_linksPurchasedSeparately): ?>
+                                <?php echo $this->getFormattedLinkPrice($_link); ?>
+                            <?php endif; ?>
+                    </span>
+                    <?php if ($_isRequired): ?>
+                        <script type="text/javascript">
+                            $('links_<?php echo $_link->getId() ?>').advaiceContainer = 'links-advice-container';
+                            $('links_<?php echo $_link->getId() ?>').callbackFunction = 'validateDownloadableCallback';
+                        </script>
+                    <?php endif; ?>
+                </li>
+            <?php endforeach; ?>
+            </ul>
+
+            <?php if ($_isRequired): ?>
+                <span id="links-advice-container"></span>
+            <?php endif;?>
+        </dd>
+    </dl>
+    <script type="text/javascript">
+        Product.Downloadable = Class.create();
+        Product.Downloadable.prototype = {
+            config : {},
+            initialize : function(config){
+                this.config = config;
+                this.reloadPrice();
+            },
+            reloadPrice : function(){
+                var price = 0;
+                config = this.config;
+                $$('.product-downloadable-link').each(function(elm){
+                    if (config[elm.value] && elm.checked) {
+                        price += parseFloat(config[elm.value]);
+                    }
+                });
+                try {
+                    var _displayZeroPrice = optionsPrice.displayZeroPrice;
+                    optionsPrice.displayZeroPrice = false;
+                    optionsPrice.changePrice('downloadable', price);
+                    optionsPrice.reload();
+                    optionsPrice.displayZeroPrice = _displayZeroPrice;
+                } catch (e) {
+
+                }
+            }
+        };
+
+        function validateDownloadableCallback(elmId, result) {
+            var container = $('downloadable-links-list');
+            if (result == 'failed') {
+                container.removeClassName('validation-passed');
+                container.addClassName('validation-failed');
+            } else {
+                container.removeClassName('validation-failed');
+                container.addClassName('validation-passed');
+            }
+        }
+
+        var dConfig = new Product.Downloadable(<?php echo $this->getDownloadableJsonConfig() ?>);
+    </script>
+<?php endif;?>        
+        
+        
+<!-- FINISH AITOC  -->   
 
     <?php if ($messages = $this->getMessages()): ?>
         <?php foreach ($messages as $message): ?>
