<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2006-2015 X.commerce, Inc. (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/** @var $upsModel Mage_Usa_Model_Shipping_Carrier_Ups */
$upsModel = Mage::getSingleton('upslabel/config_upsmethod');
$orShipArr = $upsModel->getCode('originShipment');

/** @var $this Mage_Adminhtml_Block_Template */
$current = $this->getRequest()->getParam('section');
$websiteCode = $this->getRequest()->getParam('website');
$storeCode = $this->getRequest()->getParam('store');
if ($current == 'upslabel') {
    if (!$storeCode && $websiteCode) {
        /** @var $web Mage_Core_Model_Website */
        $web = Mage::getModel('Mage_Core_Model_Website')->load($websiteCode);
        $storedAllowedMethods = $web->getConfig('upslabel/shipping/defaultshipmentmethod');
        $storedAllowedMethodsWorld = $web->getConfig('upslabel/shipping/defaultshipmentmethodworld');
        $storedAllowedMethodsReturn = $web->getConfig('upslabel/return/default_return_method');
        $storedOriginShipment = $web->getConfig('upslabel/shipping/origin_shipment');
    } elseif ($storeCode) {
        $storedAllowedMethods = Mage::getStoreConfig('upslabel/shipping/defaultshipmentmethod', $storeCode);
        $storedAllowedMethodsWorld = Mage::getStoreConfig('upslabel/shipping/defaultshipmentmethodworld', $storeCode);
        $storedAllowedMethodsReturn = Mage::getStoreConfig('upslabel/return/default_return_method', $storeCode);
        $storedOriginShipment = Mage::getStoreConfig('upslabel/shipping/origin_shipment', $storeCode);
    } else {
        $storedAllowedMethods = Mage::getStoreConfig('upslabel/shipping/defaultshipmentmethod');
        $storedAllowedMethodsWorld = Mage::getStoreConfig('upslabel/shipping/defaultshipmentmethodworld');
        $storedAllowedMethodsReturn = Mage::getStoreConfig('upslabel/return/default_return_method');
        $storedOriginShipment = Mage::getStoreConfig('upslabel/shipping/origin_shipment');
    }
    ?>
    <script type="text/javascript">
        //<![CDATA[
        var upslabelXml = Class.create();
        upslabelXml.prototype = {
            initialize: function () {
                this.originShipmentTitle = '';
                this.allowedMethodsId = 'upslabel_shipping_defaultshipmentmethod';
                this.allowedMethodsWorldId = 'upslabel_shipping_defaultshipmentmethodworld';
                this.allowedMethodsReturnId = 'upslabel_return_default_return_method';

                <?php /** @var $_coreHelper Mage_Core_Helper_Data */ $_coreHelper = Mage::helper('core'); ?>
                this.storedAllowedMethods = '<?php echo $storedAllowedMethods ?>';
                this.storedAllowedMethodsWorld = '<?php echo $storedAllowedMethodsWorld ?>';
                this.storedAllowedMethodsReturn = '<?php echo $storedAllowedMethodsReturn ?>';
                this.originShipmentObj = <?php echo $_coreHelper->jsonEncode($orShipArr) ?>;
                this.setFormValues();
            },
            updateAllowedMethods: function (originShipmentTitle) {
                var allowedMethods = $(this.allowedMethodsId),
                    allowedMethodsWorld = $(this.allowedMethodsWorldId),
                    allowedMethodsReturn = $(this.allowedMethodsReturnId),
                    originShipment = this.originShipmentObj[originShipmentTitle];

                while (allowedMethods.length > 0) {
                    allowedMethods.remove(0);
                }

                while (allowedMethodsWorld.length > 0) {
                    allowedMethodsWorld.remove(0);
                }

                while (allowedMethodsReturn.length > 0) {
                    allowedMethodsReturn.remove(0);
                }


                var code, option, optionWorld, optionReturn;
                for (code in originShipment) {
                    option = new Element('option', {value: code}).update(originShipment[code]);
                    optionWorld = new Element('option', {value: code}).update(originShipment[code]);
                    optionReturn = new Element('option', {value: code}).update(originShipment[code]);

                    if (this.storedAllowedMethods == code) {
                        option.selected = true;
                    }
                    if (this.storedAllowedMethodsWorld == code) {
                        optionWorld.selected = true;
                    }
                    if (this.storedAllowedMethodsReturn == code) {
                        optionReturn.selected = true;
                    }

                    allowedMethods.insert(option);
                    allowedMethodsWorld.insert(optionWorld);
                    allowedMethodsReturn.insert(optionReturn);
                }
            },
            setFormValues: function () {
                Event.observe($('upslabel_shipping_origin_shipment'), 'change', this.changeOriginShipment.bind(this));
                this.changeOriginShipment(null, null);
            },
            changeOriginShipment: function (Event, key) {
                this.originShipmentTitle = key ? key : $F('upslabel_shipping_origin_shipment');
                this.updateAllowedMethods(this.originShipmentTitle);
            }
        };
        xmlUpsLabel = new upslabelXml();
        //]]>
    </script>
<?php } ?>