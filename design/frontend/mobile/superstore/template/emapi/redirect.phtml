<style type="text/css">
    #header-nav, #site_header {
        display: none !important;
    }    
</style>
<?php
$quoteId = $this->getRequest()->getParam('qid');
$ivp_cv = $this->getRequest()->getParam('cvv');
$orderId = $this->getRequest()->getParam('oid');
$store_credit = $this->getRequest()->getParam('store_credit');
?>
    <style type="text/css">

        .loader-wrapper {
            background-color: #fff;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0px;
            left: 0px;
            z-index: 1000;
        }

        #typing-loader {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            animation: typing 1s linear infinite alternate;
            position: relative;
            top: 10%;
            left: -3rem;
            margin: 0 auto;
        }

        @keyframes typing {
            0% {
                background-color: rgba(0, 0, 0, 1);
                box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 0.2),
                6.4rem 0 0 0 rgba(0, 0, 0, 0.2);
            }
            25% {
                background-color: rgba(0, 0, 0, 0.4);
                box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 2),
                6.4rem 0 0 0 rgba(0, 0, 0, 0.2);
            }
            75% {
                background-color: rgba(0, 0, 0, 0.4);
                box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 0.2),
                6.4rem 0 0 0 rgba(0, 0, 0, 1);
            }
        }

    </style>
    <div class="loader-wrapper">
        <div id="typing-loader"></div>
    </div>
<?php
if (Mage::helper('telrtransparent/config')->getActivePaymentMethod() == "telrtransparent") {
    $quote = Mage::getModel("sales/quote")->loadByIdWithoutStore($quoteId);
    $currency = $quote->getQuoteCurrencyCode();

    //select shipping charges
    $shippingCountry = $quote->getShippingAddress()->getCountryId();
    $baseShippingFee = Mage::helper('emapi')->getShippingCharges($shippingCountry, $quote->getBaseSubtotal());
    $shippingFee = Mage::helper('directory')->currencyConvert($baseShippingFee, "AED", $currency);
    $price = $quote->getGrandTotal() + $shippingFee;
    $allowedCurrencies = array("USD", "AED", "SAR");
    /*
     * Code for store credit
     */
    $storeBalance = 0;
    $baseStoreBalance = 0;
    if ($store_credit) {
        $quoteStorecredits = Mage::helper('aw_storecredit/totals')->getQuoteStoreCredit($quoteId);
        if (count($quoteStorecredits) > 0) {
            foreach ($quoteStorecredits as $quoteStorecredit) {
                $_baseStorecreditAmount = $quoteStorecredit->getBaseStorecreditAmount();
                $baseStoreBalance = Mage::helper('directory')->currencyConvert($_baseStorecreditAmount, "AED", $currency);
                $storeBalance = Mage::helper('directory')->currencyConvert($_baseStorecreditAmount, "AED", $currency);
            }
        }
    }
    if (!in_array($currency, $allowedCurrencies)) {
        $currency = "USD";
        $shippingFee = $baseShippingFee;
        $price = $quote->getBaseGrandTotal() + $shippingFee;
        $price = Mage::helper('directory')->currencyConvert($price, "AED", "USD");
        $price = number_format(($price - $storeBalance), 2, '.', '');
    } else {
        $price = number_format(($price - $baseStoreBalance), 2, '.', '');
    }

    $billing = $quote->getBillingAddress();
    $shipping = $quote->getShippingAddress();
    $email = $quote->getCustomerEmail();

    $ivp_store = Mage::getStoreConfig('payment/telrtransparent/store_id', Mage::app()->getStore());
    $ivp_test = Mage::getStoreConfig('payment/telrtransparent/sandbox', Mage::app()->getStore());
    $ivp_desc = Mage::getStoreConfig('payment/telrtransparent/ivp_desc', Mage::app()->getStore());

    $mdlRestmob = Mage::getModel('restmob/quote_index');
    $id = $mdlRestmob->getIdByReserveId($orderId);
    $_order = $mdlRestmob->load($id);

    $ivp_exm = $_order->getCcExpMonth();
    $ivp_exy = substr($_order->getCcExpYear(), -2);
    $ivp_cn = $_order->getCcNumber();
    ?>
    <form name="telrPaymentForm" action="https://secure.innovatepayments.com/gateway/trans.html" method="post">
        <?php
        function SignData($post_data, $secretKey, $fieldList)
        {
            $signatureParams = explode(',', $fieldList);
            $signatureString = $secretKey;
            foreach ($signatureParams as $param) {
                if (array_key_exists($param, $post_data)) {
                    $signatureString .= ':' . trim($post_data[$param]);
                } else {
                    $signatureString .= ':';
                }
            }
            return sha1($signatureString);
        }

        $firstname = $billing->getFirstname();
        $lastname = $billing->getLastname();
        $street1 = $billing->getStreet(1);
        $street2 = $billing->getStreet(2);
        $street3 = $billing->getStreet(3);
        $city = $billing->getCity();
        $region = $billing->getRegion();
        $postcode = $billing->getPostcode();
        $country = $billing->getCountry();
        $telephone = $billing->getTelephone();

        $mdlRestmob = Mage::getModel('restmob/quote_index');
        $id = $mdlRestmob->getIdByQuoteId($quoteId);
        if ($id) {
            $_order = $mdlRestmob->load($id);
            if ($_order->getIsBilling()) {
                $diffBilling = json_decode($_order->getBillingAddress(), true);
                $firstname = $diffBilling['firstname'];
                $lastname = $diffBilling['lastname'];
                $street1 = $diffBilling['street'];
                $street2 = "";
                $street3 = "";
                $city = $diffBilling['city'];
                $region = $diffBilling['region'];
                $postcode = $diffBilling['postcode'];
                $country = $diffBilling['country_id'];
                $telephone = $diffBilling['telephone'];
            }
        }
        // Build up the parameters needed by the gateway
        $post_data = Array(
            'ivp_store' => $ivp_store,//'16408',
            'ivp_cart' => $orderId,
            'ivp_amount' => $price,
            'ivp_currency' => $currency,
            'ivp_test' => $ivp_test,
            'ivp_timestamp' => '0',
            'ivp_desc' => $ivp_desc,
            'ivp_extra' => 'bill,return',
            'bill_fname' => $firstname,
            'bill_sname' => $lastname,
            'bill_addr1' => $street1,
            'bill_addr2' => $street2,
            'bill_addr3' => $street3,
            'bill_city' => $city,
            'bill_region' => $region,
            'bill_zip' => $postcode,
            'bill_country' => $country,
            'bill_email' => $email,
            'bill_phone1' => $telephone,
            'ivp_cn' => $ivp_cn,
            'ivp_exm' => $ivp_exm,
            'ivp_exy' => $ivp_exy,
            'ivp_cv' => $ivp_cv
        );
        $post_data['return_cb_auth'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/successcallback?oid=' . $_GET['oid'];
        $post_data['return_cb_decl'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/cancelcallback?oid=' . $_GET['oid'];
        $post_data['return_cb_can'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/cancelcallback?oid=' . $_GET['oid'];
        $post_data['return_auth'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/success?oid=' . $_GET['oid'];
        $post_data['return_decl'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/cancel?oid=' . $_GET['oid'];
        $post_data['return_can'] = Mage::getUrl('', array('_forced_secure' => true)) . 'emapi/CheckoutSoap/cancel?oid=' . $_GET['oid'];
        $secret_key = 'jGV#V79ndZv';

        // First create the signature for the main purchase details, as this used both to authenticate the request and in creating the other signatures.
        $post_data['ivp_signature'] = SignData($post_data, $secret_key, 'ivp_store,ivp_amount,ivp_currency,ivp_test,ivp_timestamp,ivp_cart,ivp_desc,ivp_extra');

        // Now create the signature for the billing details (uses the ivp_signature created first)
        $post_data['bill_signature'] = SignData($post_data, $secret_key, 'bill_title,bill_fname,bill_sname,bill_addr1,bill_addr2,bill_addr3,bill_city,bill_region,bill_country,bill_zip,ivp_signature');


        // Now create the signature for the return/call-back URLs (also uses the ivp_signature)
        $post_data['return_signature'] = SignData($post_data, $secret_key, 'return_cb_auth,return_cb_decl,return_cb_can,return_auth,return_decl,return_can,ivp_signature');

        // Output the form fields. Ensuring that the form data is html safe(e.g. things like//converting< to &lt; ) must be done after the signature values are calculated.
        foreach ($post_data as $k => $v) {
            echo "<input type=\"hidden\" name=\"" . $k . "\" value=\"" . htmlspecialchars($v) . "\">
";
        }
        ?>
    </form>
    <script type="text/javascript">
        document.telrPaymentForm.submit();
    </script>
    <?php
} else {
    $mdlRestmob = Mage::getModel('restmob/quote_index');
    $id = $mdlRestmob->getIdByReserveId($orderId);
    $_order = $mdlRestmob->load($id);

    $ivp_exm = $_order->getCcExpMonth();
    $ivp_exy = substr($_order->getCcExpYear(), -2);
    $ivp_cn = $_order->getCcNumber();

    $quote = Mage::getModel("sales/quote")->loadByIdWithoutStore($quoteId);
    $billing = $quote->getBillingAddress();
    $ivp_name = $billing->getFirstname() . " " . $billing->getLastname();
    $currency = $quote->getQuoteCurrencyCode();
    $publicKey = Mage::helper('telrtransparent/config')->getCheckoutDotComPublicKey($currency);
    ?>
    <script async src="<?php echo Mage::helper('telrtransparent/config')->getCheckoutDotComScriptUrl(); ?>"></script>
    <form class="card-form" method="POST"
          action="<?php echo $this->getUrl('emapi/CheckoutSoap/checkoutdotcom'); ?>"
          onsubmit="return false;">
        <div id="id"></div>
        <input id="cardId" data-checkout="card-number" value="<?php echo $ivp_cn; ?>" maxlength="19" type="text"
               placeholder="Credit card number" required>
        <input data-checkout="card-name" value="<?php echo $ivp_name; ?>" type="text" placeholder="Name on card"
               maxlength="100" required>
        <input data-checkout="expiry-month" value="<?php echo $ivp_exm; ?>" type="text" placeholder="MM" maxlength="2"
               required>
        <input data-checkout="expiry-year" type="text" value="<?php echo $ivp_exy; ?>" placeholder="YY" maxlength="2"
               required>
        <input data-checkout="cvv" type="text" placeholder="CVV" value="<?php echo $ivp_cv; ?>" maxlength="3" required>
        <input type="hidden" id="cardTok" name="ckoCardToken">
        <input type="hidden" id="orderId" name="orderId" value="<?php echo $orderId; ?>">
        <input type="hidden" id="quoteId" name="quoteId" value="<?php echo $quoteId; ?>">
        <input type="hidden" id="store_credit" name="store_credit" value="<?php echo $store_credit; ?>">
        <input type="submit" id="sub" value="Pay Now">
    </form>

    <script>
        window.CKOConfig = {
            debugMode: true,
            publicKey: '<?php echo $publicKey; ?>',
            customerEmail: "<?php echo $quote->getCustomerEmail(); ?>",
            ready: function (event) {
                console.log("CheckoutKit.js is ready");
                CheckoutKit.monitorForm('.card-form', CheckoutKit.CardFormModes.CARD_TOKENISATION);
                CheckoutKit.addEventHandler(CheckoutKit.Events.CARD_TOKENISED, function (event) {
                    cardTok.value = event.data.id;
                    //submit the form data to your server with the card token
                    document.getElementsByClassName('card-form')[0].submit();
                });
                setTimeout(function () {
                    $j('#sub').click();
                    console.log("After click");
                }, 1000);
            },
            apiError: function (event) {
                console.log("API Breaks");
            }
        }
    </script>
    <?php
}
function buildCallbackUrl($part)
{
    $url = Mage::getUrl($part, array('_nosid' => true));
    $url = trim(str_replace('&amp;', '&', $url));
    return $url;
}
?>