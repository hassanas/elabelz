<?php
// Retrieve order
$orderId = Mage::getSingleton('checkout/session')->getLastRealOrderId();
if (!$orderId) {
    $orderId = $_REQUEST['orderId'];
}
if ($orderId) {
    $_order = Mage::getModel('sales/order')->loadByIncrementId($orderId);
    // Check here which payment method enabled and rendered form as per that payment method
    if ($_order->getId() && Mage::helper('telrtransparent/config')->getActivePaymentMethod() == "checkoutdotcom") {
        ?>
        <script async
                src="<?php echo Mage::helper('telrtransparent/config')->getCheckoutDotComScriptUrl(); ?>"></script>
        <style type="text/css">
            .loader-wrapper {
                background-color: #fff;
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0px;
                left: 0px;
                z-index: 1000;
            }
            #typing-loader {
                width: 2rem;
                height: 2rem;
                border-radius: 50%;
                animation: typing 1s linear infinite alternate;
                position: relative;
                top: 10%;
                left: -3rem;
                margin: 0 auto;
            }
            @keyframes typing {
                0% {
                    background-color: rgba(0, 0, 0, 1);
                    box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 0.2),
                    6.4rem 0 0 0 rgba(0, 0, 0, 0.2);
                }
                25% {
                    background-color: rgba(0, 0, 0, 0.4);
                    box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 2),
                    6.4rem 0 0 0 rgba(0, 0, 0, 0.2);
                }
                75% {
                    background-color: rgba(0, 0, 0, 0.4);
                    box-shadow: 3.2rem 0 0 0 rgba(0, 0, 0, 0.2),
                    6.4rem 0 0 0 rgba(0, 0, 0, 1);
                }
            }
        </style>
        <?php
        $billing = $_order->getBillingAddress();
        $fullName = $billing->getFirstname() . " " . $billing->getLastname();
        $publicKey = Mage::helper('telrtransparent/config')->getCheckoutDotComPublicKey($_order->getOrderCurrencyCode());
        $_payment = $_order->getPayment();
        $ivp_exm = "";
        $ivp_exy = "";
        $ivp_cv = "";
        $ivp_cn = "";

        if (is_object($_payment)) {
            $ivp_exm = $_payment->getCcExpMonth();
            $ivp_exy = $_payment->getCcExpYear();
            $ivp_cv = $_SESSION['_cardSession']['cc_cid'];
            $ivp_cn = $_payment->getCcNumber();
        }
        ?>
        <div class="loader-wrapper">
            <p style="text-align: center; font-size: 18px;top: 50%;"><?php echo $this->__("Waiting response from payment gateway.") ?></p>
            <div id="typing-loader"></div>
        </div>
        <form class="card-form" method="POST"
              action="<?php echo $this->getUrl('telrtransparent/payment/checkoutdotcom'); ?>"
              onsubmit="return false;">
            <div id="id"></div>
            <input id="cardId" data-checkout="card-number" value="<?php echo $ivp_cn; ?>" maxlength="19" type="text"
                   placeholder="Credit card number" required>
            <input data-checkout="card-name" value="<?php echo $fullName; ?>" type="text" placeholder="Name on card"
                   maxlength="100" required>
            <input data-checkout="expiry-month" value="<?php echo $ivp_exm; ?>" type="text" placeholder="MM"
                   maxlength="2"
                   required>
            <input data-checkout="expiry-year" type="text" value="<?php echo $ivp_exy; ?>" placeholder="YY"
                   maxlength="2"
                   required>
            <input data-checkout="cvv" type="text" placeholder="CVV" value="<?php echo $ivp_cv; ?>" maxlength="3"
                   required>
            <input type="hidden" id="cardTok" name="ckoCardToken">
            <input type="hidden" id="orderId" name="orderId" value="<?php echo $orderId; ?>">
            <input type="submit" id="sub" value="Pay Now">
        </form>
        <script>
            var notreload = false;
            window.CKOConfig = {
                debugMode: false,
                publicKey: "<?php echo $publicKey; ?>",
                customerEmail: "<?php echo $_order->getCustomerEmail(); ?>",
                ready: function (event) {
                    CheckoutKit.monitorForm('.card-form', CheckoutKit.CardFormModes.CARD_TOKENISATION);
                    CheckoutKit.addEventHandler(CheckoutKit.Events.CARD_TOKENISED, function (event) {
                        Mage.Cookies.set("orderId", '<?php echo $orderId; ?>', new Date(new Date().getTime() + 7 * 60000));
                        Mage.Cookies.set("ckoCardToken", event.data.id, new Date(new Date().getTime() + 7 * 60000));
                        document.getElementById("cardTok").value = event.data.id;
                        notreload = true;
                        document.getElementsByClassName('card-form')[0].submit();
                    });
                    if ((Mage.Cookies.get("orderId") == undefined && Mage.Cookies.get("orderId") == null && '<?php echo $orderId; ?>' != Mage.Cookies.get("orderId")) && (Mage.Cookies.get("ckoCardToken") == null && Mage.Cookies.get("ckoCardToken") == undefined)) {
                        setTimeout(function () {
                            $j('#sub').click();
                        }, 1000);
                    } else {
                        notreload = true;
                        document.getElementById("cardTok").value = Mage.Cookies.get("ckoCardToken");
                        document.getElementsByClassName('card-form')[0].submit();
                    }
                },
                apiError: function (event) {
                    console.log("API Breaks", event);
                    window.location = '<?php echo $this->getUrl('onestepcheckout', array('_secure' => true)); ?>';
                }
            }
            window.addEventListener("beforeunload", function (e) {
                if (!notreload) {
                    var confirmationMessage = "<?php echo $this->__('Changes you made may not be saved.')?>";
                    (e || window.event).returnValue = confirmationMessage;
                    return confirmationMessage;
                }
            });
        </script>
    <?php } elseif ($_order->getId() && Mage::helper('telrtransparent/config')->getActivePaymentMethod() == "telrtransparent") {
        ?>

        <?php

        $price = $_order->getGrandTotal();
        $currency = $_order->getOrderCurrencyCode();
        $allowedCurrencies = array("USD", "AED", "SAR");
        if (!in_array($currency, $allowedCurrencies)) {
            $price = $_order->getBaseGrandTotal();
            $price = Mage::helper('directory')->currencyConvert($price, "AED", "USD");
            $currency = "USD";
        }
        $price = number_format($price, 2, '.', '');

        $billing = $_order->getBillingAddress();
        $shipping = $_order->getShippingAddress();

        $email = $_order->getCustomerEmail();

        $ivp_store = Mage::getStoreConfig('payment/telrtransparent/store_id', Mage::app()->getStore());
        $ivp_test = Mage::getStoreConfig('payment/telrtransparent/sandbox', Mage::app()->getStore());
        $ivp_desc = Mage::getStoreConfig('payment/telrtransparent/ivp_desc', Mage::app()->getStore());

        $_payment = $_order->getPayment();
        $ivp_exm = "";
        $ivp_exy = "";
        $ivp_cv = "";
        $ivp_cn = "";

        if (is_object($_payment)) {
            $ivp_exm = $_payment->getCcExpMonth();
            $ivp_exy = $_payment->getCcExpYear();
            $ivp_cv = $_SESSION['_cardSession']['cc_cid'];
            $ivp_cn = $_payment->getCcNumber();
        }
        unset($_SESSION['_cardSession']);
        ?>
        <form name="telrPaymentForm" action="https://secure.innovatepayments.com/gateway/trans.html" method="post">
            <?php
            function SignData($post_data, $secretKey, $fieldList)
            {
                $signatureParams = explode(',', $fieldList);
                $signatureString = $secretKey;
                foreach ($signatureParams as $param) {
                    if (array_key_exists($param, $post_data)) {
                        $signatureString .= ':' . trim($post_data[$param]);
                    } else {
                        $signatureString .= ':';
                    }
                }
                return sha1($signatureString);
            }

            if ($billing) {
                $firstName = $billing->getFirstname();
                $lastName = $billing->getLastname();
                $billingAddress1 = $billing->getStreet(1);
                $billingAddress2 = $billing->getStreet(2);
                $billingAddress3 = $billing->getStreet(3);
                $city = $billing->getCity();
                $region = $billing->getRegion();
                $postcode = $billing->getPostcode();
                $country = $billing->getCountry();
                $phone = $billing->getTelephone();
            } elseif ($shipping) {
                $firstName = $shipping->getFirstname();
                $lastName = $shipping->getLastname();
                $billingAddress1 = $shipping->getStreet(1);
                $billingAddress2 = $shipping->getStreet(2);
                $billingAddress3 = $shipping->getStreet(3);
                $city = $shipping->getCity();
                $region = $shipping->getRegion();
                $postcode = $shipping->getPostcode();
                $country = $shipping->getCountry();
                $phone = $shipping->getTelephone();
            }
            // Build up the parameters needed by the gateway
            $post_data = Array(
                'ivp_store' => $ivp_store,//'16408',
                'ivp_cart' => $orderId,
                'ivp_amount' => $price,
                'ivp_currency' => $currency,
                'ivp_test' => $ivp_test,
                'ivp_timestamp' => '0',
                'ivp_desc' => $ivp_desc,
                'ivp_extra' => 'bill,return',
                'bill_fname' => $firstName,
                'bill_sname' => $lastName,
                'bill_addr1' => $billingAddress1,
                'bill_addr2' => $billingAddress2,
                'bill_addr3' => $billingAddress3,
                'bill_city' => $city,
                'bill_region' => $region,
                'bill_zip' => $postcode,
                'bill_country' => $country,
                'bill_email' => $email,
                'bill_phone1' => $phone,
                'ivp_cn' => $ivp_cn,
                'ivp_exm' => $ivp_exm,
                'ivp_exy' => $ivp_exy,
                'ivp_cv' => $ivp_cv,
                'return_cb_auth' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/successCb?orderId=' . $orderId,
                'return_cb_decl' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/cancelCb?orderId=' . $orderId,
                'return_cb_can' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/cancelCb?orderId=' . $orderId,
                'return_auth' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/success?orderId=' . $orderId,
                'return_decl' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/cancel?orderId=' . $orderId,
                'return_can' => Mage::getUrl('', array('_forced_secure' => true)) . 'telrtransparent/payment/cancel?orderId=' . $orderId,
            );

            $secret_key = 'jGV#V79ndZv';

            // First create the signature for the main purchase details, as this used both to authenticate the request and in creating the other signatures.
            $post_data['ivp_signature'] = SignData($post_data, $secret_key, 'ivp_store,ivp_amount,ivp_currency,ivp_test,ivp_timestamp,ivp_cart,ivp_desc,ivp_extra');

            // Now create the signature for the billing details (uses the ivp_signature created first)
            $post_data['bill_signature'] = SignData($post_data, $secret_key, 'bill_title,bill_fname,bill_sname,bill_addr1,bill_addr2,bill_addr3,bill_city,bill_region,bill_country,bill_zip,ivp_signature');


            // Now create the signature for the return/call-back URLs (also uses the ivp_signature)
            $post_data['return_signature'] = SignData($post_data, $secret_key, 'return_cb_auth,return_cb_decl,return_cb_can,return_auth,return_decl,return_can,ivp_signature');

            // Output the form fields. Ensuring that the form data is html safe(e.g. things like//converting< to &lt; ) must be done after the signature values are calculated.
            foreach ($post_data as $k => $v) {
                echo "<input type=\"hidden\" name=\"" . $k . "\" value=\"" . htmlspecialchars($v) . "\">
";
            }
            ?>
        </form>
        <?php
        function buildCallbackUrl($part)
        {
            $url = Mage::getUrl($part, array('_nosid' => true));
            $url = trim(str_replace('&amp;', '&', $url));
            return $url;
        }

        ?>
        <script type="text/javascript">
            document.telrPaymentForm.submit();
        </script>

        <?php
    }
}
?>
